#!/usr/bin/python3

# specific characters for core_pattern
# %p    pid
# %P    global pid
# %u    uid
# %g/%d gid
# %s    signal that caused the coredump
# %t    UNIX time of coredump
# %h    hostname
# %e/%E executable
# %c    core limit size

# fd0 -> coredump
# no fd1, fd2
# cwd -> /

if __name__ == '__main__':
    import io, os, sys

    if not os.isatty(2):
        log = os.path.join(os.path.dirname(__file__), 'error')
        try:
            f = os.open(log, os.O_WRONLY | os.O_CREAT, 0o644)
            if sys.stdout: sys.stdout.flush()
            os.dup2(f, 1)
            if sys.stderr: sys.stderr.flush()
            os.dup2(f, 2)
            sys.stderr = os.fdopen(2, 'wb')
            if sys.version_info.major >= 3:
                sys.stderr = io.TextIOWrapper(sys.stderr)
            sys.stdout = sys.stderr
        except OSError:  # We have no idea.
            pass

    from crashlib.report import init_report, error_log
    from crashlib.handler import process_crash

    # cmdline: self %p %s %c
    err_msg = None
    while True:
        if len(sys.argv) not in (3, 4):
            err_msg = 'Usage: chandler %p %s %c'
            break
        try:
            pid = int(sys.argv[1])
        except Exception as e:
            err_msg = 'Invalid pid %s: %s' % (sys.argv[1], str(e))
            break
        try:
            sig = int(sys.argv[2])
        except Exception as e:
            err_msg = 'Invalid signal %s: %s' % (sys.argv[2], str(e))
            break
        ulimit = -1
        if len(sys.argv) >= 4:
            try:
                ulimit = int(sys.argv[3])
            except Exception as e:
                err_msg = 'Invalid core limit %s: %s' % (sys.argv[3], str(e))
                break
        break

    if err_msg:
        error_log('%s', err_msg)
        sys.exit(0)
    init_report(pid)
    process_crash(pid, sig, ulimit)
